// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

/*
#    Copyright (C) 2017  alianse777
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/* "random" numbers generator (not cryptographicaly secure)
   rand(uint seed) - returns random number generated by seed
   randint() - returns random number with current time as seed
   randbytes(uint size) - returns byte array of random bytes
*/


contract Random {
    string originSeed = "NoTeQuemesPato!";
    uint256  baseSeed;


    constructor(){
        baseSeed =(uint256(keccak256(abi.encodePacked(originSeed))))/(block.timestamp*100);
    }

    function NewBaseSeed(string memory _randomString)
        public                
        returns(uint256)
    {
    uint256 seed = uint256(keccak256(abi.encodePacked(
        block.timestamp + block.difficulty +
        ((uint256(keccak256(abi.encodePacked(originSeed)))) / (block.timestamp)) +
        block.gaslimit + 
        ((uint256(keccak256(abi.encodePacked(_randomString)))) / (block.timestamp)) +
        block.number
    )));
        baseSeed = seed;
        return seed;
    }
   
    function rand()
        public
        view  
        returns(uint256)
    {
    uint256 seed = uint256(keccak256(abi.encodePacked(
        block.timestamp + block.difficulty +         
        ((uint256(keccak256(abi.encodePacked(baseSeed)))) +
        block.number
    ))));
        //baseSeed = NewBaseSeed(seed);
        return seed;
    }   

    
    /**
     * @dev Generate random uint in range [a, b]
     * @return uint
     */
    function randrange(uint a, uint b) public view returns(uint) {
        return a + (rand() % b);
    }
    function blockTime()public view returns(uint){
        return block.timestamp;
    }
    function blockNum()public view returns(uint){
        return block.number;
    }
    
}